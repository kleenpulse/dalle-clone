import React, { useState } from "react";
import { useNavigate } from "react-router-dom";

import { preview } from "../assets";
import { getRandomPrompt } from "../utils";
import { Foobar, FormField, Loader } from "../components";

const CreatePost = () => {
	const navigate = useNavigate();
	const [form, setForm] = useState({
		name: "",
		prompt: "",
		photo: "",
	});
	const [generatingImg, setGeneratingImg] = useState(false);
	const [loading, setLoading] = useState(false);

	const generateImage = async () => {
		if (form.prompt) {
			try {
				setGeneratingImg(true);
				const response = await fetch(
					"https://dalle-clone-0pbf.onrender.com/api/v1/dalle",
					{
						method: "POST",
						headers: {
							"Content-Type": "application/json",
						},
						body: JSON.stringify({ prompt: form.prompt }),
					}
				);
				const data = await response.json();
				setForm({ ...form, photo: `data:image/jpeg;base64,${data.photo}` });
			} catch (error) {
				alert(error);
			} finally {
				setGeneratingImg(false);
			}
		} else {
			alert("Please enter a prompt");
		}
	};
	const handleSubmit = async (e) => {
		e.preventDefault();
		if (form.prompt && form.photo) {
			setLoading(true);
			try {
				const response = await fetch(
					"https://dalle-clone-0pbf.onrender.com/api/v1/post",
					{
						method: "POST",
						headers: {
							"Content-Type": "application/json",
						},
						body: JSON.stringify(form),
					}
				);
				await response.json();
				navigate("/");
			} catch (error) {
				alert(error);
			} finally {
				setLoading(false);
			}
		} else {
			if (loading) {
				alert("Please");
			} else {
				alert("Please enter a prompt and generate an image");
			}
		}
	};
	const handleSurpriseMe = () => {
		const randomPrompt = getRandomPrompt(form.prompt);
		setForm({ ...form, prompt: randomPrompt });
	};
	const handleChange = (e) => {
		// e.preventDefault();
		setForm({ ...form, [e.target.name]: e.target.value });
	};
	return (
		<>
			<section className="border-[10px] border-solid border-[#000] max-w-7xl mx-auto relative sm:bg-[#000000] md:w-fit sm:p-7 rounded-3xl sm:shadow-[-5px_-5px_15px_rgba(187,187,187,0.218),5px_5px_15px_rgba(0,0,0,0.35),inset_-5px_-5px_15px_rgba(187,187,187,0.218),inset_5px_5px_15px_#171717]">
				<div>
					<h1 className="font-extrabold text-[#ececec] text-[32px]">Create</h1>
					<p className="mt-2 text-[#c5c5c5] text-[16px] max-w-[500px]">
						Create imaginative and visually stuning images generated by Dall-E
						AI and share them with the community
					</p>
				</div>

				<form className="mt-16 max-w-3xl" onSubmit={handleSubmit}>
					<div className="flex flex-col gap-5">
						<FormField
							labelName="Your name"
							type="name"
							name="name"
							placeholder="John Doe"
							value={form.name}
							handleChange={handleChange}
						/>

						<FormField
							labelName="Prompt"
							type="text"
							name="prompt"
							placeholder="eg - A synthwave style sunset above the reflecting water of the sea, digital art"
							value={form.prompt}
							handleChange={handleChange}
							isSurpriseMe
							handleSurpriseMe={handleSurpriseMe}
						/>
					</div>

					<div className="relative bg-[#111] text-gray-900 text-sm focus:ring-blue-500 focus:border-blue-500 w-64 p-3 h-64 justify-center items-center flex mt-5 rounded-xl">
						{form.photo ? (
							<img
								src={form.photo}
								alt={form.prompt}
								className="w-full h-full object-contain rounded-xl"
							/>
						) : (
							<img
								src={preview}
								alt="preview"
								className="w-9/12 h-9/12 object-contain"
							/>
						)}
						{generatingImg && (
							<div className="absolute inset-0 z-0 justify-center flex items-center bg-[rgba(0,0,0,0.5)] rounded-lg">
								<Loader color={"white"} />
							</div>
						)}
					</div>

					<div className="mt-5 flex gap-5">
						<button
							type="button"
							onClick={generateImage}
							className="text-white shadow-[0_0_8px_#888] font-bold rounded-md text-[15px] w-full sm:w-fit px-4 py-2 uppercase sm:text-center"
							id="generateBtn"
						>
							{generatingImg ? "Generating..." : "Generate Image"}
						</button>
					</div>

					<div className="mt-10">
						<p className="mt-2 text-[#d5d5d5] text-[14px] ">
							Once you have created the image you want, you can share it with
							others in the community
						</p>
						<button
							type="submit"
							id="shareBtn"
							className="shadow-[0_0_8px_#888] capitalize mt-3 text-white ,#0ff)] font-bold rounded-md text-sm w-full sm:w-auto px-5 py-2.5 text-center"
						>
							{loading ? "Sharing..." : "Share with the community"}
						</button>
					</div>
				</form>
			</section>
			<Foobar />
		</>
	);
};

export default CreatePost;
